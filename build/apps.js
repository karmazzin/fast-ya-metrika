var _AnalyticsCode="UA-44401879-2",_gaq=_gaq||[];_gaq.push(["_setAccount",_AnalyticsCode]),_gaq.push(["_trackPageview"]),function(){var e=document.createElement("script");e.type="text/javascript",e.async=!0,e.src="https://ssl.google-analytics.com/ga.js";var t=document.getElementsByTagName("script")[0];t.parentNode.insertBefore(e,t)}();
!function(r){"use strict";r.config(["$httpProvider","$urlRouterProvider","$akChromeProvider",function(r,e,o){r.interceptors.push("jsonpInterceptor"),e.otherwise(function(r){var e=r.get("$state");e.go("main")}),o.setBadgeColor({color:[0,0,0,190]})}]).run(["$state","$rootScope",function(r,e){e.$on("$stateChangeSuccess",function(e,o,t,n,s){r.previous=n,r.previous.params=s})}])}(angular.module("metrikangular",["ngStorage","ngResource","ui.router","metrikangular.dash","jsonpFix","messages","macros","ak.chrome"]));
!function(e){"use strict";e.directive("messagesAlert",[function(){return{restrict:"E",scope:{aMessages:"=messages"},template:'<div ng-repeat="oMessage in aMessages" class="alert" ng-class="[\'alert-\' + (oMessage.type || \'warning\')]" role="alert">\n    <button type="button" class="close" ng-click="close($index)">\n        <span aria-hidden="true">&times;</span>\n    </button>\n    <div ng-bind="oMessage.text"></div>\n</div>\n',controller:["$scope",function(e){e.close=function(s){e.aMessages[s].callback(),e.aMessages.splice(s,1)}}]}}])}(angular.module("messages",[]));
!function(r){"use strict";r.filter("cut",function(){return function(r,t,n,u){if(!r)return"";if(n=parseInt(n,10),!n)return r;if(r.length<=n)return r;if(r=r.substr(0,n),t){var e=r.lastIndexOf(" ");-1!=e&&(r=r.substr(0,e))}return r+(u||" …")}}).filter("yandexDate",["$filter",function(){return function(r){return null==r?"":r.substr(6,2)+"."+r.substr(4,2)+"."+r.substr(2,2)}}])}(angular.module("macros",[]));
"use strict";!function(e,t){e.provider("$akChrome",function(){var e=this;this.setBadgeColor=t.browserAction.setBadgeBackgroundColor,this.setBadgeText=function(e){null==e&&(e=""),t.browserAction.setBadgeText({text:e+""})},this.$get=function(){function t(){this.setBadgeColor=e.setBadgeColor,this.setBadgeText=e.setBadgeText}return new t}})}(angular.module("ak.chrome",[]),chrome);
!function(e){"use strict";e.factory("jsonpInterceptor",["$timeout","$window","$q",function(e,a,r){var n=0;return{request:function(r){if("JSONP"===r.method){var c=n.toString(36);n++,r.callbackName="angularcallbacks_"+c,r.url=r.url.replace("JSON_CALLBACK",r.callbackName),e(function(){a[r.callbackName]=angular.callbacks["_"+c]},0,!1)}return r},response:function(e){var r=e.config;return"JSONP"===r.method&&delete a[r.callbackName],e},responseError:function(e){var n=e.config;return"JSONP"===n.method&&delete a[n.callbackName],r.reject(e)}}}])}(angular.module("jsonpFix",[]));
"use strict";angular.module("metrikangular.dash",[]).config(["$stateProvider",function(e){e.state("main",{url:"/main",controllerAs:"main",controller:"metrikangular.dash.main",templateUrl:"theme/templates/dash/main.html",resolve:{},data:{viewTitle:"Dashboard"}})}]).controller("metrikangular.dash.main",["$localStorage","$resource","$interval","$timeout","$akChrome",function(e,t,n,a,r){var s=this;s.messages=[],e.gaFirst||(_gaq.push(["_trackEvent","Alert","Info","First open "+new Date]),e.gaFirst=!0);var o=t("https://api-metrika.yandex.ru/counters.json",{callback:"JSON_CALLBACK"},{get:{method:"JSONP"}}),c=t("https://api-metrika.yandex.ru/stat/traffic/summary.json?id=:id",{callback:"JSON_CALLBACK"},{get:{method:"JSONP"}});s.fnGetCountersList=function(t){t&&_gaq.push(["_trackEvent","Action","Clear cache button"]),s.messages=[],o.get({},function(n){s.counters=e.counters=n.counters,!e.manyAlert&&s.counters.length>50&&(s.messages.push({type:"info",text:"У вас большое количество счетчиков, а API Я.Метрики имеет ограничение на лимиты в количестве запросов. Если у вас возникнут проблемы с работой расширения,пожалуйста, дайте знать.",callback:function(){e.manyAlert=!0}}),_gaq.push(["_trackEvent","Info","Many counters "+s.counters.length])),s.fnGetCountersDetail(t)},function(){s.counters=e.counters=null,s.messages.push({type:"danger",text:"Непредвиденная ошибка, попробуйте авторизоваться в Яндексе",callback:function(){}}),_gaq.push(["_trackEvent","Error","Counters list error"])})},s.fnGetCountersDetail=function(t){function a(e){c.get({id:s.counters[e].id},function(t){s.counters[e].traffic=t},function(){u||(u=!0,n.cancel(i),s.messages.push({type:"danger",text:"Непредвиденная ошибка, попробуйте сбросить кеш",callback:function(){}}),_gaq.push(["_trackEvent","Error","Counters detail error"]))})}if(r.setBadgeText(s.counters.length),!e.ttl||new Date(e.ttl)<new Date||t)var o=0,u=!1,i=n(function(){o<s.counters.length?(a(o),o++):(e.response_date=s.response_date=new Date,e.ttl=new Date(s.response_date.getTime()+6e4),n.cancel(i))},20);else s.response_date=new Date(e.response_date)},r.setBadgeText("..."),a(function(){e.counters&&e.counters.length?(s.counters=e.counters,s.fnGetCountersDetail()):s.fnGetCountersList()},100)}]);
//# sourceMappingURL=data:application/json;base64,